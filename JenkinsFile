#!/usr/bin/groovy

node {
    def root = pwd()
    def golangTool = tool 'golang_1.7'
    def appName = ""
    def appvers = ""

    stage("Config") {
      // clone the configuration repository and copy the current configuration
      def configDir = "${root}/configuration"
      def configFile = "${root}/config.json"
      dir(configDir) {
        git url: "${env.CONFIGURATION_URL}", credentialsId: "${env.CONFIGURATION_CREDS}"
        sh "mv ${configDir}/${ENVIRONMENT}-config.json ${configFile}"
        deleteDir()
      }
      // read the current configuration
      def configJson = readJSON file: "${configFile}"
      for (param in configJson.credparams + configJson.jobparams) { 
        env."${param.name}" = (param.type == "booleanParam") ? "${param.defaultvalue}".toBoolean() : "${param.defaultvalue}"
      }
    }
    
    stage("Setup") {
        deleteDir()
		withEnv([
          "PATH+=${golangTool}/bin:${root}/gopath/bin",
          "GOROOT=${golangTool}",
          "GOPATH=${root}/gopath"
        ]) {
            sh """
              mkdir -p ${root}/gopath/bin ${root}/gopath/pkg ${root}/gopath/src/github.com/venicegeo/vzutil-urlcheck
              go version
            """
    
        }
		dir("${root}/gopath/src/github.com/venicegeo/vzutil-urlcheck") {
			git url: "${env.GIT_URL}", branch: "master"
			appvers = (sh(script: "git describe --long --tags --always | sed 's/\\./-/'g", returnStdout: true)).trim();
			appName = "vzutil-urlcheck-${appvers}-${env.BUILD_NUMBER}"
		}
    }

    stage("Build") {
        withEnv([
          "PATH+=${golangTool}/bin:${root}/gopath/bin",
          "GOROOT=${golangTool}",
          "GOPATH=${root}/gopath",
          "GOBIN=${root}/gopath/bin"
        ]) {
            sh """
              cd "\$GOPATH/src/github.com/venicegeo/vzutil-urlcheck"
              go install
            """
        }
    }
    
    stage("Report") {
		sh """
		  mv ${root}/gopath/bin/* .
		  ./vzutil-urlcheck
		"""
    }
}
